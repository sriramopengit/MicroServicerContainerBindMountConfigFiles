1. FROM mcr.microsoft.com/dotnet/aspnet:8.0 AS base WORKDIR /app EXPOSE 80 Why do yo want to write EXPOSE 80 statement and its purpose? What happens if you are not writing it? 2. FROM mcr.microsoft.com/dotnet/sdk:8.0 AS build WORKDIR /src COPY ["MicroServicerContainerBindMountConfigFiles.csproj", "./"] RUN dotnet restore "MicroServicerContainerBindMountConfigFiles.csproj" COPY . . RUN dotnet build "MicroServicerContainerBindMountConfigFiles.csproj" -c Release -o /app/build Based on the above, I can understand COPY ["MicroServicerContainerBindMountConfigFiles.csproj", "./"] copies the .csproj file to the image's src folder as the WORKDIR is /src. Is it not sufficient to provide COPY MicroServicerContainerBindMountConfigFiles.csproj ./? 3. From the above command RUN dotnet restore "MicroServicerContainerBindMountConfigFiles.csproj" COPY . . Why do you need the command RUN dotnet restore...? I understand that this command extracts the packages in the project and copies to the src folder of the image. Please confirm my understanding is right? In that case you should give the command COPY . ./ right? And again why do you need to separately run dotnet restore as you are already copying all the files using COPY . from the project folder which also includes all the packages?

 4. FROM build AS publish RUN dotnet publish "MicroServicerContainerBindMountConfigFiles.csproj" -c Release -o /app/publish /p:UseAppHost=false What is the purpose of /p:UseAppHost=false? 

5. FROM base AS final WORKDIR /app COPY --from=publish /app/publish . ENTRYPOINT ["dotnet", "MicroServicerContainerBindMountConfigFiles.dll"] From the docker script you provided, base, build, publish and final are the images being created and "final" is the image is that is used to build the container. Which part of the code determines the image to create the container? Is it the line containing ENTRYPOINT....? 

6. Difference between docker compose up --build -d and docker-compose up -d 

7. What do these lines do with the explanation of each line and parameters? builder.Configuration .SetBasePath(Directory.GetCurrentDirectory()) .AddJsonFile("appsettings.json", optional: false, reloadOnChange: true) .AddJsonFile("appsettings.Docker.json", optional: true, reloadOnChange: true) .AddEnvironmentVariables(); 

8. I am not able to appreciate the usage of the below code. What values do they add to ASP.NET? Even without all thes things, it works fine. # (Optional) Helps ASP.NET know it's running inside a container - DOTNET_RUNNING_IN_CONTAINER=true # (Optional) Improves file watching in containerized environments - DOTNET_USE_POLLING_FILE_WATCHER=1 # (Optional) Specify where the dotnet host is located inside container - DOTNET_HOST_PATH=/usr/share/dotnet/dotnet Start with the first, and if I am ok you start next and so on. Don't provide me everything at one shot.

9. I observed that docker compose down <service name> did not stop the service rather removed it? Why did it just not bring down?