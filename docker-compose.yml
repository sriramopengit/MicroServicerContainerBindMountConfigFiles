# ---------------------------------------------------------------
# Use this to create a single service 
# and dynamically mount the config files upon container creation
# 
# Create a multiple .env files (.env.dev, .env.prod, .env.staging)
# In these .env files, set the the settings files to use
# in the variable APPSETTINGS_FILE
# 
# When running docker compose, specify the .env file to be used.
# For example: docker compose --env-file .env.prod up -d
# ----------------------------------------------------------------


services:
  multi-configfiles-using-singleservice:
    build: ./MicroServicerContainerBindMountConfigFiles
    container_name: multiconfigfiles-singleservice
    volumes:
      # Host file (outside) â†’ Container file (inside)
      - ${APPSETTINGS_FILE}:/app/appsettings.json
    environment:
      - ASPNETCORE_URLS=http://+:80
      # Force environment to Production, as we are always mounting 
      # dynamically .json file (Prod, Staging, Env) to app/appsettings.json, 
      - ASPNETCORE_ENVIRONMENT=Production   
    ports:
      - "5004:80"
